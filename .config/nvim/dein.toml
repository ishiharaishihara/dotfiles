[[plugins]]
repo='soramugi/auto-ctags.vim'
hook_add = '''
    let g:auto_ctags = 1
    let g:auto_ctags_directory_list = ['.git']
    let g:auto_ctags_filetype_mode = 1
'''
[[plugins]]
repo='liuchengxu/vista.vim'
[[plugins]]
repo='scrooloose/nerdcommenter'
[[plugins]]
repo='machakann/vim-sandwich'
[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR>
                    \ defx#do_action('open')
        nnoremap <silent><buffer><expr> c
                    \ defx#do_action('copy')
        nnoremap <silent><buffer><expr> m
                    \ defx#do_action('move')
        nnoremap <silent><buffer><expr> p
                    \ defx#do_action('paste')
        nnoremap <silent><buffer><expr> l
                    \ defx#do_action('open')
        nnoremap <silent><buffer><expr> E
                    \ defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P
                    \ defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> o
                    \ defx#do_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> K
                    \ defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N
                    \ defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M
                    \ defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C
                    \ defx#do_action('toggle_columns',
                    \                'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> S
                    \ defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d
                    \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
                    \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
                    \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
                    \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
                    \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
                    \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;
                    \ defx#do_action('repeat')
        nnoremap <silent><buffer><expr> h
                    \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
                    \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
                    \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
                    \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
                    \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
                    \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
                    \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
                    \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
                    \ defx#do_action('print')
        nnoremap <silent><buffer><expr> cd
                    \ defx#do_action('change_vim_cwd')
    endfunction
'''
[[plugins]]
repo = 'sophacles/vim-processing'
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_linters = {
        \   'php':['langserver'],
        \}
    let g:ale_php_langserver_use_global = 0
    let g:ale_php_langserver_executable = $HOME. '/.config/composer/vendor/bin/php-language-server.php'
    let g:ale_fixers = {
        \   'php':['phpcbf'],
        \   'javascript':['prettier'],
        \   'html':['prettier'],
        \   'css':['prettier'],
        \}
    let g:ale_php_phpcbf_standard = 'PSR1,PSR2'
    let g:ale_fix_on_save = 0
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
[[plugins]]
repo = 'jceb/vim-hier'
[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_color_change_percent = 6
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 0
    augroup MyAutoCmd
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=8
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=7
    augroup END
'''
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = { 
    \   'colorscheme': 'wombat'
    \}
'''
[[plugins]]
repo = 'dracula/vim'
on_event = 'VimEnter'
hook_add = '''
    set background=dark
    syntax on
    let g:dracula_colorterm = 0
    au MyAutoCmd VimEnter * nested colorscheme dracula
'''
[[plugins]]
repo = 'mattn/webapi-vim'
[[plugins]]
repo = 'kana/vim-metarw'
[[plugins]]
repo = 'mattn/vim-metarw-gdrive'
depends = ['mattn/webapi-vim', 'kana/vim-metarw']
[[plugins]]
repo = 'tyru/open-browser.vim'
[[plugins]]
repo = 'previm/previm'
depends = ['tyru/open-browser.vim']
[[plugins]]
repo = 'airblade/vim-gitgutter'
[[plugins]]
repo = 'tpope/vim-fugitive'
