[[plugins]]
repo='soramugi/auto-ctags.vim'
hook_add = '''
    let g:auto_ctags = 1
    let g:auto_ctags_directory_list = ['.git']
    let g:auto_ctags_filetype_mode = 1
'''
[[plugins]]
repo='liuchengxu/vista.vim'
[[plugins]]
repo='scrooloose/nerdcommenter'
[[plugins]]
repo='machakann/vim-sandwich'
[[plugins]]
repo = 'Shougo/dein.vim'
[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR>
                    \ defx#do_action('open')
        nnoremap <silent><buffer><expr> c
                    \ defx#do_action('copy')
        nnoremap <silent><buffer><expr> m
                    \ defx#do_action('move')
        nnoremap <silent><buffer><expr> p
                    \ defx#do_action('paste')
        nnoremap <silent><buffer><expr> l
                    \ defx#do_action('open')
        nnoremap <silent><buffer><expr> E
                    \ defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P
                    \ defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> o
                    \ defx#do_action('open_or_close_tree')
        nnoremap <silent><buffer><expr> K
                    \ defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N
                    \ defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M
                    \ defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C
                    \ defx#do_action('toggle_columns',
                    \                'mark:indent:icon:filename:type:size:time')
        nnoremap <silent><buffer><expr> S
                    \ defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d
                    \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
                    \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
                    \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
                    \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
                    \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
                    \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;
                    \ defx#do_action('repeat')
        nnoremap <silent><buffer><expr> h
                    \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
                    \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
                    \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
                    \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
                    \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
                    \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
                    \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
                    \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
                    \ defx#do_action('print')
        nnoremap <silent><buffer><expr> cd
                    \ defx#do_action('change_vim_cwd')
    endfunction
'''
[[plugins]]
repo = 'sophacles/vim-processing'
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_linters = {
        \   'php':['langserver'],
        \}
    let g:ale_php_langserver_use_global = 0
    let g:ale_php_langserver_executable = $HOME. '/.config/composer/vendor/bin/php-language-server.php'
    let g:ale_fixers = {
        \   'php':['phpcbf'],
        \   'javascript':['prettier'],
        \   'html':['prettier'],
        \   'css':['prettier'],
        \}
    let g:ale_php_phpcbf_standard = 'PSR1,PSR2'
    let g:ale_fix_on_save = 1
    let g:ale_set_loclist = 0
    let g:ale_set_quickfix = 1
    nmap <silent> <C-k> <Plug>(ale_previous_wrap)
    nmap <silent> <C-j> <Plug>(ale_next_wrap)
'''
[[plugins]]
repo = 'jceb/vim-hier'
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_color_change_percent = 6
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_auto_colors = 0
    augroup MyAutoCmd
        autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=8
        autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=7
    augroup END
'''
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['airblade/vim-gitgutter','tpope/vim-fugitive']
hook_add = '''
	let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['fugitive', 'gitgutter', 'filename'],
        \   ],
        \   'right': [
        \     ['lineinfo', 'syntastic'],
        \     ['percent'],
        \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
        \   ]
        \ },
        \ 'component_function': {
        \   'modified': 'MyModified',
        \   'fugitive': 'MyFugitive',
        \   'filename': 'MyFilename',
        \   'fileformat': 'MyFileformat',
        \   'filetype': 'MyFiletype',
        \   'fileencoding': 'MyFileencoding',
        \   'mode': 'MyMode',
        \   'syntastic': 'SyntasticStatuslineFlag',
        \   'charcode': 'MyCharCode',
        \   'gitgutter': 'MyGitGutter',
        \ },
        \ 'separator': {'left': '⮀', 'right': '⮂'},
        \ 'subseparator': {'left': '⮁', 'right': '⮃'}
        \ }

	function! MyModified()
	  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
	endfunction

	function! MyReadonly()
	return &ft !~? 'help\|vimfiler\|gundo' && &ro ? '⭤' : ''
	endfunction

	function! MyFilename()
        return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
          \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
            \  &ft == 'unite' ? unite#get_status_string() :
            \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
            \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
            \ ('' != MyModified() ? ' ' . MyModified() : '')
	endfunction

	function! MyFugitive()
	  try
        if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
          let _ = fugitive#head()
          return strlen(_) ? '⭠ '._ : ''
        endif
	  catch
	  endtry
	  return ''
	endfunction

	function! MyFileformat()
	  return winwidth('.') > 70 ? &fileformat : ''
	endfunction

	function! MyFiletype()
	  return winwidth('.') > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
	endfunction

	function! MyFileencoding()
	  return winwidth('.') > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
	endfunction

	function! MyMode()
	  return winwidth('.') > 60 ? lightline#mode() : ''
	endfunction

	function! MyGitGutter()
	  if ! exists('*GitGutterGetHunkSummary')
            \ || ! get(g:, 'gitgutter_enabled', 0)
            \ || winwidth('.') <= 90
        return ''
	  endif
	  let symbols = [
            \ g:gitgutter_sign_added . ' ',
            \ g:gitgutter_sign_modified . ' ',
            \ g:gitgutter_sign_removed . ' '
            \ ]
	  let hunks = GitGutterGetHunkSummary()
	  let ret = []
	  for i in [0, 1, 2]
        if hunks[i] > 0
          call add(ret, symbols[i] . hunks[i])
        endif
	  endfor
	  return join(ret, ' ')
	endfunction

	" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
	function! MyCharCode()
	  if winwidth('.') <= 70
		return ''
	  endif

	  " Get the output of :ascii
	  redir => ascii
	  silent! ascii
	  redir END

	  if match(ascii, 'NUL') != -1
		return 'NUL'
	  endif

	  " Zero pad hex values
	  let nrformat = '0x%02x'

	  let encoding = (&fenc == '' ? &enc : &fenc)

	  if encoding == 'utf-8'
		" Zero pad with 4 zeroes in unicode files
		let nrformat = '0x%04x'
	  endif

	  " Get the character and the numeric value from the return value of :ascii
	  " This matches the two first pieces of the return value, e.g.
	  " "<F>  70" => char: 'F', nr: '70'
	  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

	  " Format the numeric value
	  let nr = printf(nrformat, nr)

	  return "'". char ."' ". nr
	endfunction
'''
[[plugins]]
repo = 'dracula/vim'
on_event = 'VimEnter'
hook_add = '''
    let g:dracula_colorterm = 0
'''
[[plugins]]
repo = 'mattn/webapi-vim'
[[plugins]]
repo = 'kana/vim-metarw'
[[plugins]]
repo = 'mattn/vim-metarw-gdrive'
depends = ['mattn/webapi-vim', 'kana/vim-metarw']
[[plugins]]
repo = 'tyru/open-browser.vim'
[[plugins]]
repo = 'previm/previm'
depends = ['tyru/open-browser.vim']
[[plugins]]
repo = 'airblade/vim-gitgutter'
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if='!has("nvim")'
[[plugins]]
repo = 'roxma/nvim-yarp'
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['Shougo/context_filetype.vim']
[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
